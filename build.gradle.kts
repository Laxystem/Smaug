// This is to suppress false warnings generated by a bug in IntelliJ
@file:Suppress("DSL_SCOPE_VIOLATION", "MISSING_DEPENDENCY_CLASS", "FUNCTION_CALL_EXPECTED", "PropertyName")

import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
	java
	`maven-publish`

	kotlin("jvm")
	id("org.quiltmc.loom")
}

val archives_base_name: String by project
base.archivesName.set(archives_base_name)

val javaVersion = 17

val loader: String by project
val mappings: String by project
val minecraft: String by project
val qfapi: String by project
val qkl: String by project

dependencies {
	minecraft("com.mojang:minecraft:$minecraft")

	@Suppress("UnstableApiUsage")
	mappings(
		loom.layered {
			officialMojangMappings()
			mappings("org.quiltmc:quilt-mappings:$minecraft+build.$mappings:intermediary-v2")
		}
	)

	modImplementation("org.quiltmc:quilt-loader:$loader")
	modImplementation("org.quiltmc.quilted-fabric-api:quilted-fabric-api:$qfapi")
	modImplementation("org.quiltmc.quilt-kotlin-libraries:quilt-kotlin-libraries:$qkl")
}

configurations.all {
	exclude(group = "net.fabricmc", module = "fabric-loader")
	exclude(group = "net.fabricmc.fabric-api")
}

tasks {
	withType<KotlinCompile> {
		kotlinOptions {
			jvmTarget = javaVersion.toString()

			val kotlin: String by project
			// languageVersion: A.B of the kotlin plugin version A.B.C
			languageVersion = kotlin.substringBeforeLast('.')

			freeCompilerArgs += "-Xjvm-default=all"
			freeCompilerArgs += "-Xextended-compiler-checks"
		}
	}

	withType<JavaCompile>.configureEach {
		options.encoding = "UTF-8"
		options.isDeprecation = true
		options.release.set(javaVersion)
	}

	processResources {
		filteringCharset = "UTF-8"
		inputs.property("version", project.version)

		filesMatching("quilt.mod.json") {
			expand(
				mapOf(
					"version" to project.version
				)
			)
		}
	}

	javadoc {
		options.encoding = "UTF-8"
	}

	// Run `./gradlew wrapper --gradle-version <newVersion>` or `gradle wrapper --gradle-version <newVersion>` to update gradle scripts
	// BIN distribution should be sufficient for the majority of mods
	wrapper {
		distributionType = Wrapper.DistributionType.BIN
	}

	jar {
		from("LICENSE") {
			rename { "LICENSE_${archives_base_name}" }
		}
	}
}

val targetJavaVersion = JavaVersion.toVersion(javaVersion)
if (JavaVersion.current() < targetJavaVersion) {
	kotlin.jvmToolchain(javaVersion)

	java.toolchain {
		languageVersion.set(JavaLanguageVersion.of(javaVersion))
	}
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	// If this mod is going to be a library, then it should also generate Javadocs in order to aid with development.
	// Uncomment this line to generate them.
	// withJavadocJar()

	// Still required by IDEs such as Eclipse and VSC
	sourceCompatibility = targetJavaVersion
	targetCompatibility = targetJavaVersion
}

// Configure the maven publication
publishing {
	publications {
		register<MavenPublication>("Maven") {
			from(components.getByName("java"))
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
